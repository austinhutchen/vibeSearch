<!DOCTYPE html>


<head>
  <title>Google Maps Search with Mood Filter</title>
  <style>
    /* Basic styles for layout */

    #map {
      height: 650px;
      width: 115%;
    }

    #searchInput,
    #moodInput {
      flex-grow: 1;
      padding: 5px;
    }

    .search-bar {
      max-width: 500px;
      margin: auto;
      padding-top: 20px;
    }

    .search-bar .input-group {
      border-radius: 30px;
      overflow: hidden;
    }
  </style>
</head>

<body style="padding-bottom: 85%;">
  <!-- Input fields for search key and mood -->
  <div class="container">
    <div class="search-bar">
      <div class="input-group">
        <input style="border-color: rgb(255, 202, 28); border-width: 3px; border-radius: 30px" type="text"
          id="searchInput" class="form-control" placeholder=" Search...">
      </div>
    </div>
  </div>

  <!-- Div for the map and mood selector -->
  <div class="container text-center mt-3">
    {{!-- link for get request review --}}
    <a href="" id="reviewInfoLink"></a>
    <div class="row">
      <div class="col-7">
        <div id="map"></div>
      </div>
      <div class="col-1"></div>
      <div class="col-4 rounded-3 border border-3 secondary">
        {{#unless review}}
        {{!-- Mood Selector Panel --}}
        <div id="mood-panel">
          <h2 class="my-4">What's the <span
              style="font-weight:700; font-style:italic; color: rgb(255, 202, 28)">vibe</span> today?</h2>
          <div class="col">
            <div class="row my-2 mx-3">
              <button id="adventureButton" style="background-color: rgba(70, 130, 180, 0.85);"
                class="btn text-white bg-gradient p-2">Adventure</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="cozyButton" style="background-color: rgba(60, 179, 113, 0.85);"
                class="btn text-white bg-gradient p-2">Cozy</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="livelyButton" style="background-color: rgba(255, 165, 0, 0.85);"
                class="btn text-white bg-gradient p-2">Lively</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="romanceButton" style="background-color: rgba(220, 20, 60, 0.85);"
                class="btn text-white bg-gradient p-2">Romantic</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="hungryButton" style="background-color: rgba(75, 0, 130, 0.85);"
                class="btn text-white bg-gradient p-2">Hungry</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="relaxButton" style="background-color: rgba(70, 130, 180, 0.85);"
                class="btn text-white bg-gradient p-2">Relaxed</button>
            </div>
            <!-- New Mood Buttons -->
            <div class="row my-2 mx-3">
              <button id="partyButton" style="background-color: rgba(255, 0, 255, 0.85);"
                class="btn text-white bg-gradient p-2">Party</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="natureButton" style="background-color: rgba(34, 139, 34, 0.85);"
                class="btn text-white bg-gradient p-2">Nature</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="culturalButton" style="background-color: rgba(128, 0, 128, 0.85);"
                class="btn text-white bg-gradient p-2">Cultural</button>
            </div>
            <div class="row my-2 mx-3">
              <button id="workoutButton" style="background-color: rgba(255, 99, 71, 0.85);"
                class="btn text-white bg-gradient p-2">Workout</button>
            </div>
            <div class="row mx-3 text-start" style="padding-bottom: 10%;"></div>
          </div>
        </div>

        {{else}}
        {{!-- Review Panel --}}
        <div id="review-panel text-start">
          <div class="col">
            <div class="text-end mt-2">
              <form action="/map">
                <input style="visibility:hidden" name="location" value={{location_name}}>
                <button type="submit" class="bg-transparent text-secondary"
                  style="border: none"><strong>X</strong></button>
              </form>
            </div>
            <h4 class="mt-1 text-center" style="font-weight: bold;">{{location_name}}</h4>
            {{#if reviews.length}}
            <h5 class="mb-2"><span style="font-weight: bold;">Rating: </span>{{rating}}</h5>
            {{/if}}
            <div class="row mx-3 text-start">
              <h5 class="mb-1">Reviews</h5>
              <div class="overflow-y-scroll mr-auto" style="max-width: 100%; max-height: 300px">
                {{#if reviews.length}}
                {{#each reviews}}
                <div class="card mx-auto my-2" style="width: 100%;">
                  <div class="card-body">
                    <h5 class="card-title">@{{this.username}}</h5>
                    <h6 class="card-subtitle mb-2 text-body-secondary">Rating: {{this.rating}}</h6>
                    <h6 class="card-subtitle mb-2 text-body-secondary">Mood: {{this.mood_name}}</h6>
                    <p class="card-text px-2 border rounded" style="border-color: rgb(196, 196, 196);">{{this.review}}
                    </p>
                  </div>
                </div>
                {{/each}}
                {{else}}
                <p>No Reviews.</p>
                {{/if}}
              </div>
            </div>

            <div class="row mx-3 mt-3 text-start">
              <h5 class="mb-1">Write a Review</h5>
              <form action="/addReview" method="POST">
                <input type="hidden" name="location" value={{location_name}}>
                <input type="hidden" name="place_id" value={{location_id}}>

                <label for="mood-select" class="form-label">Choose a mood for this location</label>
                <select id="mood-select" class="form-select" name="mood" required>
                  <option value="" selected>Select a mood</option>
                  <option value=1>Adventure</option>
                  <option value=2>Cozy</option>
                  <option value=3>Lively</option>
                  <option value=4>Romantic</option>
                  <option value=5>Hungry</option>
                  <option value=6>Relaxed</option>
                  <option value=7>Party</option>
                  <option value=8>Nature</option>
                  <option value=9>Cultural</option>
                  <option value=10>Workout</option>
                </select>

                <label for="location-rating" class="form-label my-1">Rate this location from 1-5</label>
                <select id="location-rating" class="form-select" name="rating" required>
                  <option selected value="">Select a rating</option>
                  <option value=1>1</option>
                  <option value=2>2</option>
                  <option value=3>3</option>
                  <option value=4>4</option>
                  <option value=5>5</option>
                </select>

                <label for="review-text" class="form-label my-1">Review</label>
                <textarea maxlength="250" class="form-control" id="review-text" rows="3" name="review"
                  required></textarea>

                <button type="submit" class="btn mt-3" style="background-color: rgb(255, 202, 28);">Submit</button>
              </form>
            </div>

            <div class="row mx-3 text-start" style="padding-bottom: 10%;"></div>
          </div>
        </div>
        {{/unless}}
      </div>
    </div>
  </div>


  <script>
    var map;
    var service;
    var infowindow;
    var autocomplete;
    var markers = [];

    // Get Request for Reviews
    function getReviewInfo(location_name, place_id) {
      link = document.getElementById("reviewInfoLink");
      link.setAttribute('href', '/mapInfo?location=' + location_name + '&place_id=' + place_id);
      link.click();
    }

    // Initialize the map and autocomplete
    function initMap() {
      // Begin in Boulder, Colorado
      var boulder = new google.maps.LatLng(40.015, -105.2705);
      infowindow = new google.maps.InfoWindow();
      map = new google.maps.Map(document.getElementById('map'), {
        center: boulder,
        zoom: 13
      });

      // Initialize autocomplete on search input
      var inputField = document.getElementById('searchInput');
      autocomplete = new google.maps.places.Autocomplete(inputField, {
        fields: ['name', 'geometry']
      });

      // Add listener for autocomplete selection
      autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          makeNearbySearch(place.name);
        }
      });

      // Set up event listener for the search bar
      inputField.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
          makeNearbySearch(inputField.value);
        }
      });


      // Event listeners for mood buttons
      document.getElementById('cozyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "cozy");
      });

      document.getElementById('livelyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "lively");
      });

      document.getElementById('hungryButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "food");
      });

      document.getElementById('romanceButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "romance");
      });

      document.getElementById('adventureButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "adventurous");
      });

      document.getElementById('relaxButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "relax");

      });

      // Event listeners for new mood buttons
      document.getElementById("partyButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "party");
      });

      document.getElementById("natureButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "nature");
      });

      document.getElementById("culturalButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "cultural");
      });

      document.getElementById("workoutButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "workout");
      });
    }


    // Function to make a Nearby Search request
    function makeNearbySearch(searchKey, mood = '') {
      var boulder = new google.maps.LatLng(40.015, -105.2705);

      var request = {
        location: boulder,
        radius: 80000,
        keyword: `${searchKey} ${mood}`

      };

      var service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          clearMarkers(); // Clear existing markers
          var bounds = new google.maps.LatLngBounds(); // Initialize bounds

          for (var i = 0; i < results.length; i++) {
            createMarker(results[i], bounds);
          }

          // Fit the map to the bounds containing all markers
          map.fitBounds(bounds);
        } else {
          console.error('REQUEST ERROR:', status);
        }
      });
    }

    // Function to create markers and extend bounds
    function createMarker(place, bounds) {
      if (!place.geometry || !place.geometry.location) {
        console.error("Location is undefined for place:", place);
        return;
      }

      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });

      markers.push(marker);

      // Extend the bounds to include each marker's location
      bounds.extend(place.geometry.location);

      //get review info when click
      google.maps.event.addListener(marker, 'click', function () {
        getReviewInfo(place.name, place.place_id);
      });

      // show place name when hover
      google.maps.event.addListener(marker, 'mouseover', function () {
        infowindow.setContent(place.name);
        infowindow.open(map, this);
      });
    }

    // Function to clear existing markers
    function clearMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      markers = [];
    }

    // Function to dynamically load the Google Maps API
    function loadGoogleMapsAPI(apiKey) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=places`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    }

    // Fetch the API key and load Google Maps
    fetch('/api/get-google-maps-key')
      .then(response => response.json())
      .then(data => {
        loadGoogleMapsAPI(data.apiKey);
      })
      .catch(error => {
        console.error('Error fetching API key:', error);
      });
  </script>
</body>
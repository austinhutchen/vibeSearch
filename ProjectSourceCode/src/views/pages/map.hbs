<!DOCTYPE html>

<body>
  <!-- Input fields for search key and mood -->
  <div class="gradient-bg">
    <svg xmlns="http://www.w3.org/2000/svg">
        <defs>
            <filter id="goo">
                <feGaussianBlur in="SourceGraphic" stdDeviation="10" result="blur" />
                <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -8" result="goo" />
                <feBlend in="SourceGraphic" in2="goo" />
            </filter>
        </defs>
    </svg>
    <div class="gradients-container">
        <div class="g1"></div>
        <div class="g2"></div>
        <div class="g3"></div>
        <div class="g4"></div>
        <div class="g5"></div>
        <div class="interactive"></div>
        <div class="container">
          <div class="search-bar">
            <div class="input-group">
              <input type="text" id="searchInput" class="form-control" placeholder="Search...">
            </div>
          </div>
          <div class="container text-center my-5">
            <div class="row">
              <div class="col-7">
                <div id="map"></div>
              </div>
              <div class="col-1"></div>
              <div class="col-4 rounded-5 bg-light border border-3 secondary">
                <h2 class="my-4">What's the mood today?</h2>
                <div class="col">
                  <div class="row my-2 mx-3">
                    <button id="adventureButton" style="background-color: rgba(70, 130, 180, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Adventure</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="cozyButton" style="background-color: rgba(60, 179, 113, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Cozy</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="livelyButton" style="background-color: rgba(255, 165, 0, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Lively</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="romanceButton" style="background-color: rgba(220, 20, 60, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Romantic</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="hungryButton" style="background-color: rgba(75, 0, 130, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Hungry</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="relaxButton" style="background-color: rgba(70, 130, 180, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Relaxed</button>
                  </div>
                  <!-- New Mood Buttons -->
                  <div class="row my-2 mx-3">
                    <button id="partyButton" style="background-color: rgba(255, 0, 255, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Party</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="natureButton" style="background-color: rgba(34, 139, 34, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Nature</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="culturalButton" style="background-color: rgba(128, 0, 128, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Cultural</button>
                  </div>
                  <div class="row my-2 mx-3">
                    <button id="workoutButton" style="background-color: rgba(255, 99, 71, 0.85);" class="moodbtn btn text-white bg-gradient p-2">Workout</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
    </div>
  </div>
  
  </div>

  <!-- Div for the map and mood selector -->
  <script>
    var map;
    var service;
    var infowindow;
    var autocomplete;
    var markers = [];

    // Initialize the map and autocomplete
    function initMap() {
      // Begin in Boulder, Colorado
      var boulder = new google.maps.LatLng(40.015, -105.2705);
      infowindow = new google.maps.InfoWindow();
      map = new google.maps.Map(document.getElementById('map'), {
        center: boulder,
        zoom: 13
      });

      // Initialize autocomplete on search input
      var inputField = document.getElementById('searchInput');
      autocomplete = new google.maps.places.Autocomplete(inputField, {
        fields: ['name', 'geometry']
      });

      // Add listener for autocomplete selection
      autocomplete.addListener('place_changed', function () {
        var place = autocomplete.getPlace();
        if (place.geometry) {
          makeNearbySearch(place.name);
        }
      });

      // Set up event listener for the search button


      // Event listeners for mood buttons
           // Event listeners for mood buttons
      document.getElementById('cozyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "cozy");
      });

      document.getElementById('livelyButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "lively");
      });

      document.getElementById('hungryButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "food");
      });

      document.getElementById('romanceButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "romance");
      });

      document.getElementById('adventureButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "adventurous");
      });

      document.getElementById('relaxButton').addEventListener('click', function () {
        makeNearbySearch("boulder", "relax");

      });

      // Event listeners for new mood buttons
      document.getElementById("partyButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "party");
      });

      document.getElementById("natureButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "nature");
      });

      document.getElementById("culturalButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "cultural");
      });

      document.getElementById("workoutButton").addEventListener("click", function () {
        makeNearbySearch("boulder", "workout");
      });
    }


    // Function to make a Nearby Search request
    function makeNearbySearch(searchKey, mood = '') {
      var boulder = new google.maps.LatLng(40.015, -105.2705);

      var request = {
        location: boulder,
        radius: 80000, 
        keyword: `${searchKey} ${mood}`

      };

      var service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, function (results, status) {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
          clearMarkers(); // Clear existing markers
          var bounds = new google.maps.LatLngBounds(); // Initialize bounds

          for (var i = 0; i < results.length; i++) {
            createMarker(results[i], bounds);
          }

          // Fit the map to the bounds containing all markers
          map.fitBounds(bounds);
        } else {
          console.error('REQUEST ERROR:', status);
        }
      });
    }

    // Function to create markers and extend bounds
    function createMarker(place, bounds) {
      if (!place.geometry || !place.geometry.location) {
        console.error("Location is undefined for place:", place);
        return;
      }

      var marker = new google.maps.Marker({
        map: map,
        position: place.geometry.location
      });

      markers.push(marker);

      // Extend the bounds to include each marker's location
      bounds.extend(place.geometry.location);

      google.maps.event.addListener(marker, 'click', function () {
        infowindow.setContent(place.name);
        infowindow.open(map, this);
      });
    }

    // Function to clear existing markers
    function clearMarkers() {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(null);
      }
      markers = [];
    }

    // Function to dynamically load the Google Maps API
    function loadGoogleMapsAPI(apiKey) {
      var script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap&libraries=places`;
      script.async = true;
      script.defer = true;
      document.body.appendChild(script);
    }

    // Fetch the API key and load Google Maps
    fetch('/api/get-google-maps-key')
      .then(response => response.json())
      .then(data => {
        loadGoogleMapsAPI(data.apiKey);
      })
      .catch(error => {
        console.error('Error fetching API key:', error);
      });
  </script>
</body>

